import abc
from pandas._config import config as config
from pandas._typing import _DType, _Scalar
#from pandas._libs.parsers import STR_NA_VALUES as STR_NA_VALUES
from pandas.core.dtypes.common import is_bool as is_bool, is_float as is_float, is_integer as is_integer, is_list_like as is_list_like
from pandas.core.frame import DataFrame as DataFrame
from pandas.errors import EmptyDataError as EmptyDataError
from pandas.io.common import get_filepath_or_buffer as get_filepath_or_buffer, is_url as is_url, stringify_path as stringify_path, urlopen as urlopen, validate_header_arg as validate_header_arg
from pandas.io.excel._util import get_writer as get_writer
from pandas.io.formats.printing import pprint_thing as pprint_thing
from pandas.io.parsers import TextParser as TextParser
from pandas.util._decorators import Appender as Appender
from typing import Any, Callable, Dict, Optional, Sequence, Union, overload

@overload
def read_excel(
    filepath: str,
    sheet_name: Optional[Sequence[Union[int, str]]],
    header: Union[int, Sequence[int]] = ...,
    names: Optional[Sequence[str]] = ...,
    index_col: Optional[Union[int, Sequence[int]]] = ...,
    usecols: Optional[Union[int, str, Sequence[Union[int, str, Callable]]]] = ...,
    squeeze: bool = ...,
    dtype: Union[str, Dict[str, Any]] = ...,
    engine: Optional[str] = ...,
    converters: Optional[Dict[Union[int, str], Callable]] = ...,
    true_values: Optional[Sequence[_Scalar]] = ...,
    false_values: Optional[Sequence[_Scalar]] = ...,
    skiprows: Optional[Sequence[int]] = ...,
    nrows: Optional[int] = ...,
    na_values: Any = ...,
    keep_default_na: bool = ...,
    verbose: bool = ...,
    parse_dates: Union[bool, Sequence, Dict[str, Sequence]] = ...,
    date_parser: Optional[Callable] = ...,
    thousands: Optional[str] = ...,
    comment: Optional[str] = ...,
    skipfooter: int = ...,
    convert_float: bool = ...,
    mangle_dupe_cols: bool = ...,
) -> Dict[Union[int, str], DataFrame]: ...

@overload
def read_excel(
    filepath: str,
    sheet_name: Union[int, str] = ...,
    header: Union[int, Sequence[int]] = ...,
    names: Optional[Sequence[str]] = ...,
    index_col: Optional[Union[int, Sequence[int]]] = ...,
    usecols: Optional[Union[int, str, Sequence[Union[int, str, Callable]]]] = ...,
    squeeze: bool = ...,
    dtype: Union[str, Dict[str, Any]] = ...,
    engine: Optional[str] = ...,
    converters: Optional[Dict[Union[int, str], Callable]] = ...,
    true_values: Optional[Sequence[_Scalar]] = ...,
    false_values: Optional[Sequence[_Scalar]] = ...,
    skiprows: Optional[Sequence[int]] = ...,
    nrows: Optional[int] = ...,
    na_values: Any = ...,
    keep_default_na: bool = ...,
    verbose: bool = ...,
    parse_dates: Union[bool, Sequence, Dict[str, Sequence]] = ...,
    date_parser: Optional[Callable] = ...,
    thousands: Optional[str] = ...,
    comment: Optional[str] = ...,
    skipfooter: int = ...,
    convert_float: bool = ...,
    mangle_dupe_cols: bool = ...,
    **kwargs
) -> DataFrame: ...

class _BaseExcelReader(metaclass=abc.ABCMeta):
    book: Any = ...
    def __init__(self, filepath_or_buffer: Any) -> None: ...
    @abc.abstractmethod
    def load_workbook(self, filepath_or_buffer: Any): ...
    def close(self) -> None: ...
    @property
    @abc.abstractmethod
    def sheet_names(self): ...
    @abc.abstractmethod
    def get_sheet_by_name(self, name: Any): ...
    @abc.abstractmethod
    def get_sheet_by_index(self, index: Any): ...
    @abc.abstractmethod
    def get_sheet_data(self, sheet: Any, convert_float: Any): ...
    def parse(self, sheet_name: int = ..., header: int = ..., names: Optional[Any] = ..., index_col: Optional[Any] = ..., usecols: Optional[Any] = ..., squeeze: bool = ..., dtype: Optional[Any] = ..., true_values: Optional[Any] = ..., false_values: Optional[Any] = ..., skiprows: Optional[Any] = ..., nrows: Optional[Any] = ..., na_values: Optional[Any] = ..., verbose: bool = ..., parse_dates: bool = ..., date_parser: Optional[Any] = ..., thousands: Optional[Any] = ..., comment: Optional[Any] = ..., skipfooter: int = ..., convert_float: bool = ..., mangle_dupe_cols: bool = ..., **kwds: Any): ...

class ExcelWriter(metaclass=abc.ABCMeta):
    def __new__(cls, path: Any, engine: Optional[Any] = ..., **kwargs: Any): ...
    book: Any = ...
    curr_sheet: Any = ...
    path: Any = ...
    @property
    @abc.abstractmethod
    def supported_extensions(self): ...
    @property
    @abc.abstractmethod
    def engine(self): ...
    @abc.abstractmethod
    def write_cells(self, cells: Any, sheet_name: Optional[Any] = ..., startrow: int = ..., startcol: int = ..., freeze_panes: Optional[Any] = ...): ...
    @abc.abstractmethod
    def save(self): ...
    sheets: Any = ...
    cur_sheet: Any = ...
    date_format: str = ...
    datetime_format: str = ...
    mode: Any = ...
    def __init__(self, path: Any, engine: Optional[Any] = ..., date_format: Optional[Any] = ..., datetime_format: Optional[Any] = ..., mode: str = ..., **engine_kwargs: Any) -> None: ...
    def __fspath__(self): ...
    @classmethod
    def check_extension(cls, ext: Any): ...
    def __enter__(self): ...
    def __exit__(self, exc_type: Any, exc_value: Any, traceback: Any) -> None: ...
    def close(self): ...

class ExcelFile:
    engine: Any = ...
    io: Any = ...
    def __init__(self, io: Any, engine: Optional[Any] = ...) -> None: ...
    def __fspath__(self): ...
    def parse(self, sheet_name: int = ..., header: int = ..., names: Optional[Any] = ..., index_col: Optional[Any] = ..., usecols: Optional[Any] = ..., squeeze: bool = ..., converters: Optional[Any] = ..., true_values: Optional[Any] = ..., false_values: Optional[Any] = ..., skiprows: Optional[Any] = ..., nrows: Optional[Any] = ..., na_values: Optional[Any] = ..., parse_dates: bool = ..., date_parser: Optional[Any] = ..., thousands: Optional[Any] = ..., comment: Optional[Any] = ..., skipfooter: int = ..., convert_float: bool = ..., mangle_dupe_cols: bool = ..., **kwds: Any): ...
    @property
    def book(self): ...
    @property
    def sheet_names(self): ...
    def close(self) -> None: ...
    def __enter__(self): ...
    def __exit__(self, exc_type: Any, exc_value: Any, traceback: Any) -> None: ...
    def __del__(self) -> None: ...
