from typing import List

def next_monday(dt): ...
def next_monday_or_tuesday(dt): ...
def previous_friday(dt): ...
def sunday_to_monday(dt): ...
def weekend_to_monday(dt): ...
def nearest_workday(dt): ...
def next_workday(dt): ...
def previous_workday(dt): ...
def before_nearest_workday(dt): ...
def after_nearest_workday(dt): ...

class Holiday:
    name = ...
    year = ...
    month = ...
    day = ...
    offset = ...
    start_date = ...
    end_date = ...
    observance = ...
    days_of_week = ...
    def __init__(self, name, year = ..., month = ..., day = ..., offset = ..., observance = ..., start_date = ..., end_date = ..., days_of_week = ...) -> None: ...
    def dates(self, start_date, end_date, return_name: bool = ...): ...

holiday_calendars = ...

def register(cls) -> None: ...
def get_calendar(name): ...

class HolidayCalendarMetaClass(type):
    def __new__(mcs, clsname, bases, attrs) -> HolidayCalendarMetaClass: ...

class AbstractHolidayCalendar(metaclass=HolidayCalendarMetaClass):
    rules: List[Holiday] = ...
    start_date = ...
    end_date = ...
    name = ...
    def __init__(self, name = ..., rules = ...) -> None: ...
    def rule_from_name(self, name): ...
    def holidays(self, start = ..., end = ..., return_name: bool = ...): ...
    @staticmethod
    def merge_class(base, other): ...
    def merge(self, other, inplace: bool = ...): ...

USMemorialDay = ...
USLaborDay = ...
USColumbusDay = ...
USThanksgivingDay = ...
USMartinLutherKingJr = ...
USPresidentsDay = ...
GoodFriday = ...
EasterMonday = ...

class USFederalHolidayCalendar(AbstractHolidayCalendar):
    rules = ...

def HolidayCalendarFactory(name, base, other, base_class = ...): ...
