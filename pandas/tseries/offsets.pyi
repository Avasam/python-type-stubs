from pandas._libs.tslibs import BaseOffset, Timestamp

class DateOffset(BaseOffset):
    normalize: bool = ...
    def __init__(self, n: int = ..., normalize: bool = ..., **kwds) -> None: ...
    def apply(self, other): ...
    def apply_index(self, i): ...
    def is_anchored(self) -> bool: ...
    def onOffset(self, dt): ...
    def isAnchored(self) -> bool: ...
    @property
    def name(self): ...
    def rollback(self, dt): ...
    def rollforward(self, dt): ...
    def is_on_offset(self, dt): ...
    @property
    def rule_code(self): ...
    def freqstr(self): ...
    @property
    def nanos(self) -> None: ...

class SingleConstructorOffset(DateOffset): ...

class _CustomMixin:
    def __init__(self, weekmask, holidays, calendar) -> None: ...

class BusinessMixin:
    @property
    def offset(self): ...

class BusinessDay(BusinessMixin, SingleConstructorOffset):
    def __init__(self, n: int = ..., normalize: bool = ..., offset = ...) -> None: ...
    def apply(self, other): ...
    def apply_index(self, i): ...
    def is_on_offset(self, dt): ...

class BusinessHourMixin(BusinessMixin):
    def __init__(self, start: str = ..., end: str = ..., offset = ...) -> None: ...
    def next_bday(self): ...
    def rollback(self, dt): ...
    def rollforward(self, dt): ...
    def apply(self, other): ...
    def is_on_offset(self, dt): ...

class BusinessHour(BusinessHourMixin, SingleConstructorOffset):
    def __init__(self, n: int = ..., normalize: bool = ..., start: str = ..., end: str = ..., offset = ...) -> None: ...

class CustomBusinessDay(_CustomMixin, BusinessDay):
    def __init__(self, n: int = ..., normalize: bool = ..., weekmask: str = ..., holidays = ..., calendar = ..., offset = ...) -> None: ...
    def apply(self, other): ...
    def apply_index(self, i) -> None: ...
    def is_on_offset(self, dt): ...

class CustomBusinessHour(_CustomMixin, BusinessHourMixin, SingleConstructorOffset):
    def __init__(self, n: int = ..., normalize: bool = ..., weekmask: str = ..., holidays = ..., calendar = ..., start: str = ..., end: str = ..., offset = ...) -> None: ...

class MonthOffset(SingleConstructorOffset):
    __init__ = ...
    @property
    def name(self): ...
    def is_on_offset(self, dt): ...
    def apply(self, other): ...
    def apply_index(self, i): ...

class MonthEnd(MonthOffset): ...
class MonthBegin(MonthOffset): ...
class BusinessMonthEnd(MonthOffset): ...
class BusinessMonthBegin(MonthOffset): ...

class _CustomBusinessMonth(_CustomMixin, BusinessMixin, MonthOffset):
    is_on_offset = ...
    apply_index = ...
    def __init__(self, n: int = ..., normalize: bool = ..., weekmask: str = ..., holidays = ..., calendar = ..., offset = ...) -> None: ...
    def cbday_roll(self): ...
    def m_offset(self): ...
    def month_roll(self): ...
    def apply(self, other): ...

class CustomBusinessMonthEnd(_CustomBusinessMonth): ...
class CustomBusinessMonthBegin(_CustomBusinessMonth): ...

class SemiMonthOffset(DateOffset):
    def __init__(self, n: int = ..., normalize: bool = ..., day_of_month = ...) -> None: ...
    @property
    def rule_code(self): ...
    def apply(self, other): ...
    def apply_index(self, i): ...

class SemiMonthEnd(SemiMonthOffset):
    def is_on_offset(self, dt): ...

class SemiMonthBegin(SemiMonthOffset):
    def is_on_offset(self, dt): ...

class Week(DateOffset):
    def __init__(self, n: int = ..., normalize: bool = ..., weekday = ...) -> None: ...
    def is_anchored(self): ...
    def apply(self, other): ...
    def apply_index(self, i): ...
    def is_on_offset(self, dt): ...
    @property
    def rule_code(self): ...

class _WeekOfMonthMixin:
    def apply(self, other): ...
    def is_on_offset(self, dt): ...

class WeekOfMonth(_WeekOfMonthMixin, DateOffset):
    def __init__(self, n: int = ..., normalize: bool = ..., week: int = ..., weekday: int = ...) -> None: ...
    @property
    def rule_code(self): ...

class LastWeekOfMonth(_WeekOfMonthMixin, DateOffset):
    def __init__(self, n: int = ..., normalize: bool = ..., weekday: int = ...) -> None: ...
    @property
    def rule_code(self): ...

class QuarterOffset(DateOffset):
    def __init__(self, n: int = ..., normalize: bool = ..., startingMonth = ...) -> None: ...
    def is_anchored(self): ...
    @property
    def rule_code(self): ...
    def apply(self, other): ...
    def is_on_offset(self, dt): ...
    def apply_index(self, dtindex): ...

class BQuarterEnd(QuarterOffset): ...
class BQuarterBegin(QuarterOffset): ...
class QuarterEnd(QuarterOffset): ...
class QuarterBegin(QuarterOffset): ...

class YearOffset(DateOffset):
    def apply(self, other): ...
    def apply_index(self, dtindex): ...
    def is_on_offset(self, dt): ...
    def __init__(self, n: int = ..., normalize: bool = ..., month = ...) -> None: ...
    @property
    def rule_code(self): ...

class BYearEnd(YearOffset): ...
class BYearBegin(YearOffset): ...
class YearEnd(YearOffset): ...
class YearBegin(YearOffset): ...

class FY5253(DateOffset):
    def __init__(self, n: int = ..., normalize: bool = ..., weekday: int = ..., startingMonth: int = ..., variation: str = ...) -> None: ...
    def is_anchored(self): ...
    def is_on_offset(self, dt): ...
    def apply(self, other): ...
    def get_year_end(self, dt): ...
    @property
    def rule_code(self): ...
    def get_rule_code_suffix(self): ...

class FY5253Quarter(DateOffset):
    def __init__(self, n: int = ..., normalize: bool = ..., weekday: int = ..., startingMonth: int = ..., qtr_with_extra_week: int = ..., variation: str = ...) -> None: ...
    def is_anchored(self): ...
    def apply(self, other): ...
    def get_weeks(self, dt): ...
    def year_has_extra_week(self, dt): ...
    def is_on_offset(self, dt): ...
    @property
    def rule_code(self): ...

class Easter(DateOffset):
    __init__ = ...
    def apply(self, other): ...
    def is_on_offset(self, dt): ...

class Tick(SingleConstructorOffset):
    def __init__(self, n: int = ..., normalize: bool = ...) -> None: ...
    def __gt__(self, other: Tick) -> bool: ...
    def __ge__(self, other: Tick) -> bool: ...
    def __lt__(self, other: Tick) -> bool: ...
    def __le__(self, other: Tick) -> bool: ...
    def __eq__(self, other: Tick) -> bool: ...
    def __ne__(self, other: Tick) -> bool: ...
    def __add__(self, other: Tick) -> Tick: ...
    def __hash__(self) -> str: ...
    @property
    def delta(self): ...
    @property
    def freqstr(self) -> str: ...
    @property
    def kwds(self) : ...
    @property
    def n(self): ...
    @property
    def name(self) -> str: ...
    @property
    def nanos(self): ...
    @property
    def normalize(self): ...
    @property
    def rule_code(self): ...
    def apply(self, other): ...
    def apply_index(self, other): ...
    def copy(self): ...
    def is_anchored(self) -> bool: ...
    def on_offset(self) -> bool: ...
    def rollback(self) -> Timestamp: ...
    def rollforward(self) -> Timestamp: ...

class Day(Tick): ...
class Hour(Tick): ...
class Minute(Tick): ...
class Second(Tick): ...
class Milli(Tick): ...
class Micro(Tick): ...
class Nano(Tick): ...
BDay = BusinessDay
BMonthEnd = BusinessMonthEnd
BMonthBegin = BusinessMonthBegin
CBMonthEnd = CustomBusinessMonthEnd
CBMonthBegin = CustomBusinessMonthBegin
CDay = CustomBusinessDay


