import matplotlib.units as dates
import matplotlib.units as units
from matplotlib.ticker import Formatter, Locator
from pandas import Index as Index, get_option as get_option
from pandas._libs import lib as lib, tslibs as tslibs
from pandas._libs.tslibs import resolution as resolution
from pandas._libs.tslibs.frequencies import FreqGroup as FreqGroup, get_freq as get_freq
from pandas.core.dtypes.common import is_datetime64_ns_dtype as is_datetime64_ns_dtype, is_float as is_float, is_float_dtype as is_float_dtype, is_integer as is_integer, is_integer_dtype as is_integer_dtype, is_nested_list_like as is_nested_list_like
from pandas.core.dtypes.generic import ABCSeries as ABCSeries
from pandas.core.indexes.datetimes import date_range as date_range
from pandas.core.indexes.period import Period as Period, PeriodIndex as PeriodIndex, period_range as period_range
from typing import Any, Optional

HOURS_PER_DAY: float
MIN_PER_HOUR: float
SEC_PER_MIN: float
SEC_PER_HOUR: Any
SEC_PER_DAY: Any
MUSEC_PER_DAY: Any

def get_pairs(): ...
def register_pandas_matplotlib_converters(func: Any): ...
def pandas_converters() -> None: ...
def register() -> None: ...
def deregister() -> None: ...
def time2num(d: Any): ...

class TimeConverter(units.ConversionInterface):
    @staticmethod
    def convert(value: Any, unit: Any, axis: Any): ...
    @staticmethod
    def axisinfo(unit: Any, axis: Any): ...
    @staticmethod
    def default_units(x: Any, axis: Any): ...

class TimeFormatter(Formatter):
    locs: Any = ...
    def __init__(self, locs: Any) -> None: ...
    def __call__(self, x: Any, pos: int = ...): ...

class PeriodConverter(dates.DateConverter):
    @staticmethod
    def convert(values: Any, units: Any, axis: Any): ...

def get_datevalue(date: Any, freq: Any): ...

class DatetimeConverter(dates.DateConverter):
    @staticmethod
    def convert(values: Any, unit: Any, axis: Any): ...
    @staticmethod
    def axisinfo(unit: Any, axis: Any): ...

class PandasAutoDateFormatter(dates.AutoDateFormatter):
    def __init__(self, locator: Any, tz: Optional[Any] = ..., defaultfmt: str = ...) -> None: ...

class PandasAutoDateLocator(dates.AutoDateLocator):
    def get_locator(self, dmin: Any, dmax: Any): ...

class MilliSecondLocator(dates.DateLocator):
    UNIT: Any = ...
    def __init__(self, tz: Any) -> None: ...
    @staticmethod
    def get_unit_generic(freq: Any): ...
    def __call__(self): ...
    def autoscale(self): ...

def period_break(dates: Any, period: Any): ...
def has_level_label(label_flags: Any, vmin: Any): ...
def get_finder(freq: Any): ...

class TimeSeries_DateLocator(Locator):
    freq: Any = ...
    base: Any = ...
    isminor: Any = ...
    isdynamic: Any = ...
    offset: int = ...
    plot_obj: Any = ...
    finder: Any = ...
    def __init__(self, freq: Any, minor_locator: bool = ..., dynamic_mode: bool = ..., base: int = ..., quarter: int = ..., month: int = ..., day: int = ..., plot_obj: Optional[Any] = ...) -> None: ...
    def __call__(self): ...
    def autoscale(self): ...

class TimeSeries_DateFormatter(Formatter):
    format: Any = ...
    freq: Any = ...
    locs: Any = ...
    formatdict: Any = ...
    isminor: Any = ...
    isdynamic: Any = ...
    offset: int = ...
    plot_obj: Any = ...
    finder: Any = ...
    def __init__(self, freq: Any, minor_locator: bool = ..., dynamic_mode: bool = ..., plot_obj: Optional[Any] = ...) -> None: ...
    def set_locs(self, locs: Any) -> None: ...
    def __call__(self, x: Any, pos: int = ...): ...

class TimeSeries_TimedeltaFormatter(Formatter):
    @staticmethod
    def format_timedelta_ticks(x: Any, pos: Any, n_decimals: Any): ...
    def __call__(self, x: Any, pos: int = ...): ...
