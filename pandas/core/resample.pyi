from pandas.core.base import ShallowMixin as ShallowMixin
from pandas.core.groupby.base import GroupByMixin as GroupByMixin
from pandas.core.groupby.groupby import _GroupBy
from pandas.core.groupby.grouper import Grouper as Grouper

class Resampler(_GroupBy, ShallowMixin):
    groupby = ...
    keys = ...
    sort: bool = ...
    axis = ...
    kind = ...
    squeeze: bool = ...
    group_keys: bool = ...
    as_index: bool = ...
    exclusions = ...
    binner = ...
    grouper = ...
    def __init__(self, obj, groupby = ..., axis: int = ..., kind = ..., **kwargs) -> None: ...
    def __getattr__(self, attr: str) : ...
    def __iter__(self) : ...
    @property
    def obj(self): ...
    @property
    def ax(self): ...
    def pipe(self, func, *args, **kwargs): ...
    def aggregate(self, func, *args, **kwargs): ...
    agg = ...
    apply = ...
    def transform(self, arg, *args, **kwargs): ...
    def pad(self, limit = ...): ...
    ffill = ...
    def nearest(self, limit = ...): ...
    def backfill(self, limit = ...): ...
    bfill = ...
    def fillna(self, method, limit = ...): ...
    def interpolate(self, method: str = ..., axis: int = ..., limit = ..., inplace: bool = ..., limit_direction: str = ..., limit_area = ..., downcast = ..., **kwargs): ...
    def asfreq(self, fill_value = ...): ...
    def std(self, ddof: int = ..., *args, **kwargs): ...
    def var(self, ddof: int = ..., *args, **kwargs): ...
    def size(self): ...
    def count(self): ...
    def quantile(self, q: float = ..., **kwargs): ...

def f(self, _method = ..., min_count: int = ..., *args, **kwargs): ...
def g(self, _method = ..., *args, **kwargs): ...
def h(self, _method = ...): ...

class _GroupByMixin(GroupByMixin):
    groupby = ...
    def __init__(self, obj, *args, **kwargs) -> None: ...

class DatetimeIndexResampler(Resampler): ...
class DatetimeIndexResamplerGroupby(_GroupByMixin, DatetimeIndexResampler): ...
class PeriodIndexResampler(DatetimeIndexResampler): ...
class PeriodIndexResamplerGroupby(_GroupByMixin, PeriodIndexResampler): ...
class TimedeltaIndexResampler(DatetimeIndexResampler): ...
class TimedeltaIndexResamplerGroupby(_GroupByMixin, TimedeltaIndexResampler): ...

def resample(obj, kind = ..., **kwds): ...
def get_resampler_for_grouping(groupby, rule, how = ..., fill_method = ..., limit = ..., kind = ..., **kwargs): ...

class TimeGrouper(Grouper):
    closed = ...
    label = ...
    kind = ...
    convention = ...
    loffset = ...
    how = ...
    fill_method = ...
    limit = ...
    base = ...
    def __init__(self, freq: str = ..., closed = ..., label = ..., how: str = ..., axis: int = ..., fill_method = ..., limit = ..., loffset = ..., kind = ..., convention = ..., base: int = ..., **kwargs) -> None: ...

def asfreq(obj, freq, method = ..., how = ..., normalize: bool = ..., fill_value = ...): ...
