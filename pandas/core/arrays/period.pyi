# Merged types from pylance
from pandas2.core import Timestamp
import numpy as np
#from pandas._libs.tslibs import NaT as NaT, NaTType as NaTType, iNaT as iNaT
#from pandas._libs.tslibs.fields import isleapyear_arr as isleapyear_arr
#from pandas._libs.tslibs.period import DIFFERENT_FREQ as DIFFERENT_FREQ, IncompatibleFrequency as IncompatibleFrequency, Period as Period, get_period_field_arr as get_period_field_arr, period_asfreq_arr as period_asfreq_arr
#from pandas._libs.tslibs.timedeltas import Timedelta as Timedelta, delta_to_nanoseconds as delta_to_nanoseconds
from pandas.core.arrays import datetimelike as dtl
from pandas.core.dtypes.common import ensure_object as ensure_object, is_datetime64_dtype as is_datetime64_dtype, is_float_dtype as is_float_dtype, is_period_dtype as is_period_dtype, pandas_dtype as pandas_dtype
from pandas.core.dtypes.dtypes import PeriodDtype as PeriodDtype
from pandas.core.dtypes.generic import ABCIndexClass as ABCIndexClass, ABCPeriodArray as ABCPeriodArray, ABCPeriodIndex as ABCPeriodIndex, ABCSeries as ABCSeries
from pandas.core.dtypes.missing import isna as isna, notna as notna
from pandas.tseries import frequencies as frequencies
from pandas.tseries.offsets import DateOffset as DateOffset, Tick as Tick
#from pandas.util._decorators import cache_readonly as cache_readonly
from typing import Any, Optional, Sequence, Union

class PeriodArray(dtl.DatetimeLikeArrayMixin, dtl.DatelikeOps):
    __array_priority__: int = ...
    def __init__(self, values: Any, freq: Optional[Any] = ..., dtype: Optional[Any] = ..., copy: bool = ...) -> None: ...
    def dtype(self): ...
    @property
    def freq(self) -> Period: ...
    def __array__(self, dtype: Any=...) -> np.ndarray: ...
    def __arrow_array__(self, type: Optional[Any] = ...): ...
    year: int = ...
    month: int = ...
    day: int = ...
    hour: int = ...
    minute: int = ...
    second: int = ...
    weekofyear: int = ...
    week: int = ...
    dayofweek: int = ...
    weekday: int = ...
    dayofyear: int = ...
    day_of_year: Any = ...
    quarter: int = ...
    qyear: int = ...
    days_in_month: int = ...
    daysinmonth: int = ...
    @property
    def is_leap_year(self) -> bool: ...
    @property
    def start_time(self) -> Timestamp: ...
    @property
    def end_time(self) -> Timestamp: ...
    def to_timestamp(self, freq: Optional[str] = ..., how: str = ...) -> Timestamp: ...
    def asfreq(self, freq: Optional[str] = ..., how: str = ...) -> Period: ...
    def astype(self, dtype: Any, copy: bool = ...): ...

def raise_on_incompatible(left: Any, right: Any): ...
def period_array(data: Sequence[Optional[Period]], freq: Optional[Union[str, Tick]]=..., copy: bool=...) -> PeriodArray: ...
def validate_dtype_freq(dtype: Any, freq: Any): ...
def dt64arr_to_periodarr(data: Any, freq: Any, tz: Optional[Any] = ...): ...
