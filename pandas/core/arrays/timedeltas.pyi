from pandas import datetime
from pandas._libs import lib as lib, tslibs as tslibs
#from pandas._libs.tslibs import NaT as NaT, iNaT as iNaT
from pandas._libs.tslibs import Timedelta as Timedelta, Timestamp as Timestamp
#from pandas._libs.tslibs.fields import get_timedelta_field as get_timedelta_field
#from pandas._libs.tslibs.timedeltas import array_to_timedelta64 as array_to_timedelta64, parse_timedelta_unit as parse_timedelta_unit, precision_from_unit as precision_from_unit
from pandas.core import nanops as nanops
from pandas.core.algorithms import checked_add_with_arr as checked_add_with_arr
from pandas.core.arrays import datetimelike as dtl
from pandas.core.dtypes.common import is_dtype_equal as is_dtype_equal, is_float_dtype as is_float_dtype, is_integer_dtype as is_integer_dtype, is_object_dtype as is_object_dtype, is_scalar as is_scalar, is_string_dtype as is_string_dtype, is_timedelta64_dtype as is_timedelta64_dtype, is_timedelta64_ns_dtype as is_timedelta64_ns_dtype, pandas_dtype as pandas_dtype
from pandas.core.dtypes.dtypes import DatetimeTZDtype as DatetimeTZDtype
from pandas.core.dtypes.generic import ABCDataFrame as ABCDataFrame, ABCIndexClass as ABCIndexClass, ABCSeries as ABCSeries, ABCTimedeltaIndex as ABCTimedeltaIndex
from pandas.core.dtypes.missing import isna as isna
from pandas.tseries.frequencies import to_offset as to_offset
from pandas.tseries.offsets import Tick as Tick
from typing import Any, Optional, Sequence

class TimedeltaArray(dtl.DatetimeLikeArrayMixin, dtl.TimelikeOps):
    __array_priority__: int = ...
    @property
    def dtype(self): ...
    def __init__(self, values: Any, dtype: Any = ..., freq: Optional[Any] = ..., copy: bool = ...) -> None: ...
    def astype(self, dtype: Any, copy: bool = ...): ...
    def sum(self, axis: Any=..., dtype: Any=..., out: Any=..., keepdims: bool=..., initial: Any=..., skipna: bool=..., min_count: int=...) -> Any: ...
    def std(self, axis: Any=..., dtype: Any=..., out: Any=..., ddof: int=..., keepdims: bool=..., skipna: bool=...) -> Any: ...
    def median(self, axis: Any=..., out: Any=..., overwrite_input: bool=..., keepdims: bool=..., skipna: bool=...) -> Any: ...
    def __mul__(self, other: Any): ...
    __rmul__: Any = ...
    def __truediv__(self, other: Any): ...
    def __rtruediv__(self, other: Any): ...
    def __floordiv__(self, other: Any): ...
    def __rfloordiv__(self, other: Any): ...
    def __mod__(self, other: Any): ...
    def __rmod__(self, other: Any): ...
    def __divmod__(self, other: Any): ...
    def __rdivmod__(self, other: Any): ...
    def __neg__(self): ...
    def __pos__(self): ...
    def __abs__(self): ...
    def total_seconds(self) -> int: ...
    def to_pytimedelta(self) -> Sequence[datetime.timedelta]: ...
    days: int = ...
    seconds: int = ...
    microseconds: int = ...
    nanoseconds: int = ...
    @property
    def components(self) -> int: ...

def sequence_to_td64ns(data: Any, copy: bool = ..., unit: str = ..., errors: str = ...): ...
def ints_to_td64ns(data: Any, unit: str = ...): ...
def objects_to_td64ns(data: Any, unit: str = ..., errors: str = ...): ...
