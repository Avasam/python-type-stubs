import numpy as np
#from pandas._config import get_option as get_option
from pandas._libs.interval import Interval as Interval, IntervalMixin as IntervalMixin
# from pandas._libs.interval import intervals_to_interval_bounds as intervals_to_interval_bounds
#from pandas.core.algorithms import take as take, value_counts as value_counts
from pandas.core.arrays.base import ExtensionArray as ExtensionArray
#from pandas.core.arrays.categorical import Categorical as Categorical
#from pandas.core.construction import array as array
from pandas.core.dtypes.cast import cast_scalar_to_array #, maybe_convert_platform as maybe_convert_platform
#from pandas.core.dtypes.common import is_categorical_dtype as is_categorical_dtype, is_datetime64_any_dtype as is_datetime64_any_dtype, is_float_dtype as is_float_dtype, is_integer_dtype as is_integer_dtype, is_interval as is_interval, is_interval_dtype as is_interval_dtype, is_list_like as is_list_like, is_object_dtype as is_object_dtype, is_scalar as is_scalar, is_string_dtype as is_string_dtype, is_timedelta64_dtype as is_timedelta64_dtype, pandas_dtype as pandas_dtype
#from pandas.core.dtypes.dtypes import IntervalDtype as IntervalDtype
#from pandas.core.dtypes.generic import ABCDatetimeIndex as ABCDatetimeIndex
from pandas.core.dtypes.generic import ABCExtensionArray as ABCExtensionArray\
#from pandas.core.dtypes.generic import ABCIndexClass as ABCIndexClass, ABCInterval as ABCInterval, ABCIntervalIndex as ABCIntervalIndex, ABCPeriodIndex as ABCPeriodIndex, ABCSeries as ABCSeries
#from pandas.core.dtypes.missing import isna as isna, notna as notna
#from pandas.core.indexers import check_array_indexer as check_array_indexer
#from pandas.core.indexes.base import ensure_index as ensure_index
#from pandas.util._decorators import Appender as Appender
from pandas._typing import Axis, Scalar
from typing import Any, Optional

class IntervalArray(IntervalMixin, ExtensionArray):
    ndim: int = ...
    can_hold_na: bool = ...
    def __new__(cls, data: Any, closed: Optional[Any] = ..., dtype: Optional[Any] = ..., copy: bool = ..., verify_integrity: bool = ...): ...
    @classmethod
    def from_breaks(cls, breaks: Any, closed: str = ..., copy: bool = ..., dtype: Optional[Any] = ...): ...
    @classmethod
    def from_arrays(cls, left: Any, right: Any, closed: str = ..., copy: bool = ..., dtype: Optional[Any] = ...): ...
    @classmethod
    def from_tuples(cls, data: Any, closed: str = ..., copy: bool = ..., dtype: Optional[Any] = ...): ...
    def __iter__(self) -> Any: ...
    def __len__(self) -> int: ...
    def __getitem__(self, value: Any): ...
    def __setitem__(self, key: Any, value: Any) -> None: ...
    def __eq__(self, other: Any) -> Any: ...
    def __ne__(self, other: Any) -> Any: ...
    def fillna(self, value: Optional[Any] = ..., method: Optional[Any] = ..., limit: Optional[Any] = ...): ...
    @property
    def dtype(self): ...
    def astype(self, dtype: Any, copy: bool = ...): ...
    def copy(self): ...
    def isna(self): ...
    @property
    def nbytes(self) -> int: ...
    @property
    def size(self) -> int: ...
    def shift(self, periods: int=..., fill_value: object=...) -> ABCExtensionArray: ...
    def take(self, indices: Any, allow_fill: bool = ..., fill_value: Optional[Any] = ..., axis: Optional[Any] = ..., **kwargs: Any): ...
    def value_counts(self, dropna: bool = ...): ...
    @property
    def left(self) -> Scalar: ...
    @property
    def right(self) -> Scalar: ...
    @property
    def closed(self) -> bool: ...
    def set_closed(self, closed: Any): ...
    @property
    def length(self) -> Scalar: ...
    @property
    def mid(self) -> cast_scalar_to_array: ...
    @property
    def is_non_overlapping_monotonic(self) -> bool: ...
    def __array__(self, dtype: Any=...) -> np.ndarray: ...
    def __arrow_array__(self, type: Optional[Any] = ...): ...
    def to_tuples(self, na_tuple: bool = ...): ...
    def repeat(self, repeats: Any, axis: Optional[Axis] = ...): ...
    def contains(self, other: Any): ...
    def overlaps(self, other: Interval) -> bool: ...

def maybe_convert_platform_interval(values: Any): ...
