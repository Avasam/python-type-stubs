import numpy as np
#from pandas._libs.tslibs import NaT as NaT, iNaT as iNaT, resolution as resolution
#from pandas._libs.tslibs import resolution as resolution
#from pandas._libs.tslibs.period import Period as Period
from pandas.core.accessor import delegate_names as delegate_names
from pandas.core.arrays.period import PeriodArray as PeriodArray, period_array as period_array, raise_on_incompatible as raise_on_incompatible, validate_dtype_freq as validate_dtype_freq
from pandas.core.dtypes.common import ensure_platform_int as ensure_platform_int, is_bool_dtype as is_bool_dtype, is_datetime64_any_dtype as is_datetime64_any_dtype, is_dtype_equal as is_dtype_equal, is_float as is_float, is_float_dtype as is_float_dtype, is_integer as is_integer, is_integer_dtype as is_integer_dtype, is_object_dtype as is_object_dtype, pandas_dtype as pandas_dtype
#from pandas.core.indexes.base import ensure_index as ensure_index, maybe_extract_name as maybe_extract_name
from pandas.core.indexes.datetimelike import DatetimeIndexOpsMixin as DatetimeIndexOpsMixin, DatetimelikeDelegateMixin as DatetimelikeDelegateMixin
from pandas.core.indexes.datetimes import DatetimeIndex as DatetimeIndex, Index as Index
from pandas.core.indexes.numeric import Int64Index as Int64Index
from pandas.core.missing import isna as isna
from pandas.core.ops import get_op_result_name as get_op_result_name
#from pandas.core.tools.datetimes import DateParseError as DateParseError, parse_time_string as parse_time_string
from pandas.tseries import frequencies as frequencies
from pandas.tseries.offsets import DateOffset as DateOffset, Tick as Tick
from pandas.util._decorators import Appender as Appender, Substitution as Substitution
from typing import Any, Optional

class PeriodDelegateMixin(DatetimelikeDelegateMixin): ...

class PeriodIndex(DatetimeIndexOpsMixin, Int64Index, PeriodDelegateMixin):
    def __new__(cls, data: Optional[Any] = ..., ordinal: Optional[Any] = ..., freq: Optional[Any] = ..., tz: Optional[Any] = ..., dtype: Optional[Any] = ..., copy: bool = ..., name: Optional[Any] = ..., **fields: Any): ...
    @property
    def values(self): ...
    def __contains__(self, key: Any) -> bool: ...
    def __array__(self, dtype: Any=...) -> np.ndarray: ...
    def __array_wrap__(self, result: Any, context: Optional[Any] = ...): ...
    def asof_locs(self, where: Any, mask: Any): ...
    def astype(self, dtype: Any, copy: bool = ..., how: str = ...): ...
    def searchsorted(self, value: Any, side: str = ..., sorter: Optional[Any] = ...): ...
    @property
    def is_full(self) -> bool: ...
    @property
    def inferred_type(self) -> str: ...
    def get_value(self, series: Any, key: Any): ...
    def get_indexer(self, target: Any, method: Optional[Any] = ..., limit: Optional[Any] = ..., tolerance: Optional[Any] = ...): ...
    def get_indexer_non_unique(self, target: Any): ...
    def get_loc(self, key: Any, method: Optional[Any] = ..., tolerance: Optional[Any] = ...): ...
    def insert(self, loc: Any, item: Any): ...
    def join(self, other: Any, how: str = ..., level: Optional[Any] = ..., return_indexers: bool = ..., sort: bool = ...): ...
    def intersection(self, other: Any, sort: bool = ...): ...
    def difference(self, other: Any, sort: Optional[Any] = ...): ...
    def memory_usage(self, deep: bool = ...): ...

def period_range(start: Any=..., end: Any=..., periods: Any=..., freq: Any=..., name: Any=...) -> PeriodIndex: ...
