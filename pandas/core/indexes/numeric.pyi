import numpy as np
#from pandas._libs import lib as lib
#from pandas._typing import DType as DType
#from pandas.core import algorithms as algorithms
#from pandas.core.dtypes.cast import astype_nansafe as astype_nansafe
#from pandas.core.dtypes.common import is_bool as is_bool, is_bool_dtype as is_bool_dtype, is_dtype_equal as is_dtype_equal, is_extension_array_dtype as is_extension_array_dtype, is_float as is_float, is_float_dtype as is_float_dtype, is_integer_dtype as is_integer_dtype, is_scalar as is_scalar, is_signed_integer_dtype as is_signed_integer_dtype, is_unsigned_integer_dtype as is_unsigned_integer_dtype, needs_i8_conversion as needs_i8_conversion, pandas_dtype as pandas_dtype
#from pandas.core.dtypes.generic import ABCFloat64Index as ABCFloat64Index, ABCInt64Index as ABCInt64Index, ABCRangeIndex as ABCRangeIndex, ABCSeries as ABCSeries, ABCUInt64Index as ABCUInt64Index
#from pandas.core.dtypes.missing import isna as isna
from pandas.core.indexes.base import Index as Index
# , InvalidIndexError as InvalidIndexError #, maybe_extract_name as maybe_extract_name
#from pandas.core.ops import get_op_result_name as get_op_result_name
#from pandas.util._decorators import Appender as Appender, cache_readonly as cache_readonly
from typing import Any, Optional, TypeVar

_T = TypeVar("_T", str, int)

class NumericIndex(Index[_T]):
    def __new__(cls, data: Optional[Any] = ..., dtype: Optional[Any] = ..., copy: bool = ..., name: Optional[Any] = ...): ...
    @property
    def is_all_dates(self) -> bool: ...
    def insert(self, loc: Any, item: Any): ...

class IntegerIndex(NumericIndex[_T]):
    def __contains__(self, key: Any) -> bool: ...

class Int64Index(IntegerIndex[np.int64]):
    __doc__: Any = ...
    @property
    def inferred_type(self) -> str: ...
    @property
    def asi8(self) -> np.ndarray: ...

class UInt64Index(IntegerIndex[np.uint64]):
    __doc__: Any = ...
    @property
    def inferred_type(self) -> str: ...
    @property
    def asi8(self) -> np.ndarray: ...

class Float64Index(NumericIndex[np.float64]):
    __doc__: Any = ...
    @property
    def inferred_type(self) -> str: ...
    def astype(self, dtype: Any, copy: bool = ...): ...
    def get_value(self, series: Any, key: Any): ...
    def equals(self, other: Any) -> bool: ...
    def __contains__(self, other: Any) -> bool: ...
    def get_loc(self, key: Any, method: Optional[Any] = ..., tolerance: Optional[Any] = ...): ...
    def is_unique(self) -> bool: ...
    def isin(self, values: Any, level: Optional[Any] = ...): ...
