from pandas._libs import algos as algos, lib as lib
from pandas.compat._optional import import_optional_dependency as import_optional_dependency
from pandas.core.dtypes.cast import infer_dtype_from_array as infer_dtype_from_array
from pandas.core.dtypes.common import ensure_float64 as ensure_float64, is_datetime64_dtype as is_datetime64_dtype, is_datetime64tz_dtype as is_datetime64tz_dtype, is_integer_dtype as is_integer_dtype, is_numeric_v_string_like as is_numeric_v_string_like, is_scalar as is_scalar, is_timedelta64_dtype as is_timedelta64_dtype, needs_i8_conversion as needs_i8_conversion
from pandas.core.dtypes.missing import isna as isna
from typing import Any, Optional

def mask_missing(arr: Any, values_to_mask: Any): ...
def clean_fill_method(method: Any, allow_nearest: bool = ...): ...
def clean_interp_method(method: Any, **kwargs: Any): ...
def find_valid_index(values: Any, how: str) -> Any: ...
def interpolate_1d(xvalues: Any, yvalues: Any, method: str = ..., limit: Optional[Any] = ..., limit_direction: str = ..., limit_area: Optional[Any] = ..., fill_value: Optional[Any] = ..., bounds_error: bool = ..., order: Optional[Any] = ..., **kwargs: Any): ...
def interpolate_2d(values: Any, method: str = ..., axis: int = ..., limit: Optional[Any] = ..., fill_value: Optional[Any] = ..., dtype: Optional[Any] = ...): ...
def pad_1d(values: Any, limit: Optional[Any] = ..., mask: Optional[Any] = ..., dtype: Optional[Any] = ...): ...
def backfill_1d(values: Any, limit: Optional[Any] = ..., mask: Optional[Any] = ..., dtype: Optional[Any] = ...): ...
def pad_2d(values: Any, limit: Optional[Any] = ..., mask: Optional[Any] = ..., dtype: Optional[Any] = ...): ...
def backfill_2d(values: Any, limit: Optional[Any] = ..., mask: Optional[Any] = ..., dtype: Optional[Any] = ...): ...
def get_fill_func(method: Any): ...
def clean_reindex_fill_method(method: Any): ...
