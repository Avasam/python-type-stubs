import abc
from typing import Any

class stop_base(metaclass=abc.ABCMeta):
    @abc.abstractmethod
    def __call__(self, retry_state: Any) -> Any: ...
    def __and__(self, other: Any): ...
    def __or__(self, other: Any): ...

class stop_any(stop_base):
    stops: Any = ...
    def __init__(self, *stops: Any) -> None: ...
    def __call__(self, retry_state: Any): ...

class stop_all(stop_base):
    stops: Any = ...
    def __init__(self, *stops: Any) -> None: ...
    def __call__(self, retry_state: Any): ...

class _stop_never(stop_base):
    def __call__(self, retry_state: Any): ...

stop_never: Any

class stop_when_event_set(stop_base):
    event: Any = ...
    def __init__(self, event: Any) -> None: ...
    def __call__(self, retry_state: Any): ...

class stop_after_attempt(stop_base):
    max_attempt_number: Any = ...
    def __init__(self, max_attempt_number: Any) -> None: ...
    def __call__(self, retry_state: Any): ...

class stop_after_delay(stop_base):
    max_delay: Any = ...
    def __init__(self, max_delay: Any) -> None: ...
    def __call__(self, retry_state: Any): ...
