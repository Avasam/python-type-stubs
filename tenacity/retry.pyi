import abc
from typing import Any, Optional

class retry_base(metaclass=abc.ABCMeta):
    @abc.abstractmethod
    def __call__(self, retry_state: Any) -> Any: ...
    def __and__(self, other: Any): ...
    def __or__(self, other: Any): ...

class _retry_never(retry_base):
    def __call__(self, retry_state: Any): ...

retry_never: Any

class _retry_always(retry_base):
    def __call__(self, retry_state: Any): ...

retry_always: Any

class retry_if_exception(retry_base):
    predicate: Any = ...
    def __init__(self, predicate: Any) -> None: ...
    def __call__(self, retry_state: Any): ...

class retry_if_exception_type(retry_if_exception):
    exception_types: Any = ...
    def __init__(self, exception_types: Any = ...): ...

class retry_unless_exception_type(retry_if_exception):
    exception_types: Any = ...
    def __init__(self, exception_types: Any = ...): ...
    def __call__(self, retry_state: Any): ...

class retry_if_result(retry_base):
    predicate: Any = ...
    def __init__(self, predicate: Any) -> None: ...
    def __call__(self, retry_state: Any): ...

class retry_if_not_result(retry_base):
    predicate: Any = ...
    def __init__(self, predicate: Any) -> None: ...
    def __call__(self, retry_state: Any): ...

class retry_if_exception_message(retry_if_exception):
    def __init__(self, message: Optional[Any] = ..., match: Optional[Any] = ...): ...

class retry_if_not_exception_message(retry_if_exception_message):
    predicate: Any = ...
    def __init__(self, *args: Any, **kwargs: Any): ...
    def __call__(self, retry_state: Any): ...

class retry_any(retry_base):
    retries: Any = ...
    def __init__(self, *retries: Any) -> None: ...
    def __call__(self, retry_state: Any): ...

class retry_all(retry_base):
    retries: Any = ...
    def __init__(self, *retries: Any) -> None: ...
    def __call__(self, retry_state: Any): ...
