import abc
from typing import Any

class wait_base(metaclass=abc.ABCMeta):
    @abc.abstractmethod
    def __call__(self, retry_state: Any) -> Any: ...
    def __add__(self, other: Any): ...
    def __radd__(self, other: Any): ...

class wait_fixed(wait_base):
    wait_fixed: Any = ...
    def __init__(self, wait: Any) -> None: ...
    def __call__(self, retry_state: Any): ...

class wait_none(wait_fixed):
    def __init__(self) -> None: ...

class wait_random(wait_base):
    wait_random_min: Any = ...
    wait_random_max: Any = ...
    def __init__(self, min: int = ..., max: int = ...) -> None: ...
    def __call__(self, retry_state: Any): ...

class wait_combine(wait_base):
    wait_funcs: Any = ...
    def __init__(self, *strategies: Any) -> None: ...
    def __call__(self, retry_state: Any): ...

class wait_chain(wait_base):
    strategies: Any = ...
    def __init__(self, *strategies: Any) -> None: ...
    def __call__(self, retry_state: Any): ...

class wait_incrementing(wait_base):
    start: Any = ...
    increment: Any = ...
    max: Any = ...
    def __init__(self, start: int = ..., increment: int = ..., max: Any = ...) -> None: ...
    def __call__(self, retry_state: Any): ...

class wait_exponential(wait_base):
    multiplier: Any = ...
    min: Any = ...
    max: Any = ...
    exp_base: Any = ...
    def __init__(self, multiplier: int = ..., max: Any = ..., exp_base: int = ..., min: int = ...) -> None: ...
    def __call__(self, retry_state: Any): ...

class wait_random_exponential(wait_exponential):
    def __call__(self, retry_state: Any): ...
