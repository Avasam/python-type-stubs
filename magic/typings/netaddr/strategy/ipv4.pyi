"""
This type stub file was generated by pyright.
"""

import sys as _sys
from socket import AF_INET
from netaddr.fbsocket import AF_INET

"""IPv4 address logic."""
if _sys.platform in ('win32', 'cygwin'):
    ...
else:
    ...
width = 32
word_size = 8
word_fmt = '%d'
word_sep = '.'
family = AF_INET
family_name = 'IPv4'
version = 4
word_base = 10
max_int = 2 ** width - 1
num_words = width // word_size
max_word = 2 ** word_size - 1
prefix_to_netmask = dict([(i, max_int ^ 2 ** width - i - 1) for i in range(0, width + 1)])
netmask_to_prefix = dict([(max_int ^ 2 ** width - i - 1, i) for i in range(0, width + 1)])
prefix_to_hostmask = dict([(i, 2 ** width - i - 1) for i in range(0, width + 1)])
hostmask_to_prefix = dict([(2 ** width - i - 1, i) for i in range(0, width + 1)])
def valid_str(addr, flags=...):
    """
    :param addr: An IPv4 address in presentation (string) format.

    :param flags: decides which rules are applied to the interpretation of the
        addr value. Supported constants are INET_PTON and ZEROFILL. See the
        netaddr.core docs for details.

    :return: ``True`` if IPv4 address is valid, ``False`` otherwise.
    """
    ...

def str_to_int(addr, flags=...):
    """
    :param addr: An IPv4 dotted decimal address in string form.

    :param flags: decides which rules are applied to the interpretation of the
        addr value. Supported constants are INET_PTON and ZEROFILL. See the
        netaddr.core docs for details.

    :return: The equivalent unsigned integer for a given IPv4 address.
    """
    ...

def int_to_str(int_val, dialect=...):
    """
    :param int_val: An unsigned integer.

    :param dialect: (unused) Any value passed in is ignored.

    :return: The IPv4 presentation (string) format address equivalent to the
        unsigned integer provided.
    """
    ...

def int_to_arpa(int_val):
    """
    :param int_val: An unsigned integer.

    :return: The reverse DNS lookup for an IPv4 address in network byte
        order integer form.
    """
    ...

def int_to_packed(int_val):
    """
    :param int_val: the integer to be packed.

    :return: a packed string that is equivalent to value represented by an
    unsigned integer.
    """
    ...

def packed_to_int(packed_int):
    """
    :param packed_int: a packed string containing an unsigned integer.
        It is assumed that string is packed in network byte order.

    :return: An unsigned integer equivalent to value of network address
        represented by packed binary string.
    """
    ...

def valid_words(words):
    ...

def int_to_words(int_val):
    """
    :param int_val: An unsigned integer.

    :return: An integer word (octet) sequence that is equivalent to value
        represented by an unsigned integer.
    """
    ...

def words_to_int(words):
    """
    :param words: A list or tuple containing integer octets.

    :return: An unsigned integer that is equivalent to value represented
        by word (octet) sequence.
    """
    ...

def valid_bits(bits):
    ...

def bits_to_int(bits):
    ...

def int_to_bits(int_val, word_sep=...):
    ...

def valid_bin(bin_val):
    ...

def int_to_bin(int_val):
    ...

def bin_to_int(bin_val):
    ...

def expand_partial_address(addr):
    """
    Expands a partial IPv4 address into a full 4-octet version.

    :param addr: an partial or abbreviated IPv4 address

    :return: an expanded IP address in presentation format (x.x.x.x)

    """
    ...

