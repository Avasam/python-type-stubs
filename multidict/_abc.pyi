import abc
from collections.abc import Mapping, MutableMapping
from typing import Any, Optional

class _TypingMeta(abc.ABCMeta):
    def __getitem__(self, key: Any): ...

class MultiMapping(Mapping, metaclass=_TypingMeta):
    @abc.abstractmethod
    def getall(self, key: Any, default: Optional[Any] = ...) -> Any: ...
    @abc.abstractmethod
    def getone(self, key: Any, default: Optional[Any] = ...) -> Any: ...

class MutableMultiMapping(MultiMapping, MutableMapping, metaclass=abc.ABCMeta):
    @abc.abstractmethod
    def add(self, key: Any, value: Any) -> Any: ...
    @abc.abstractmethod
    def extend(self, *args: Any, **kwargs: Any) -> Any: ...
    @abc.abstractmethod
    def popone(self, key: Any, default: Optional[Any] = ...) -> Any: ...
    @abc.abstractmethod
    def popall(self, key: Any, default: Optional[Any] = ...) -> Any: ...
