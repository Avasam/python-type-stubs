from typing import Any, Generic, TypeVar

from ._abc import MultiMapping as MultiMapping, MutableMultiMapping as MutableMultiMapping

def getversion(md: _Base[Any, Any]) -> str: ...

_KT = TypeVar("_KT")
_VT = TypeVar("_VT")

class _Base(Generic[_KT, _VT]):
    def getall(self, key, default=...): ...
    def getone(self, key, default=...): ...
    def __getitem__(self, key): ...
    def get(self, key, default=...): ...
    def __iter__(self): ...
    def __len__(self): ...
    def keys(self): ...
    def items(self): ...
    def values(self): ...
    def __eq__(self, other: _Base[Any, Any]) -> bool: ...
    def __contains__(self, key): ...

class MultiDictProxy(_Base[_KT, _VT], MultiMapping[_KT, _VT]):
    def __init__(self, arg) -> None: ...
    def __reduce__(self) -> None: ...
    def copy(self) -> MultiDictProxy: ...

class CIMultiDictProxy(MultiDictProxy[_KT, _VT]):
    def __init__(self, arg) -> None: ...
    def copy(self) -> CIMultiDictProxy: ...

class MultiDict(_Base[_KT, _VT], MutableMultiMapping[_KT, _VT]):
    def __init__(self, *args, **kwargs) -> None: ...
    def __sizeof__(self) -> int: ...
    def __reduce__(self) -> None: ...
    def add(self, key, value) -> None: ...
    def copy(self) -> MultiDict: ...
    def __copy__(self) -> MultiDict: ...
    def extend(self, *args, **kwargs) -> None: ...
    def clear(self) -> None: ...
    def __setitem__(self, key, value) -> None: ...
    def __delitem__(self, key) -> None: ...
    def setdefault(self, key, default=...) -> None: ...
    def popone(self, key, default=...): ...
    def pop(self, key, default=...): ...
    def popall(self, key, default=...): ...
    def popitem(self): ...
    def update(self, *args, **kwargs) -> None: ...

class CIMultiDict(MultiDict): ...

