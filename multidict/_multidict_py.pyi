from ._abc import MultiMapping as MultiMapping, MutableMultiMapping as MutableMultiMapping
from collections import abc
from typing import Any, Optional

class istr(str):
    __is_istr__: bool = ...
upstr = istr

def getversion(md: Any): ...

class _Impl:
    def __init__(self) -> None: ...
    def incr_version(self) -> None: ...
    def __sizeof__(self): ...

class _Base:
    def getall(self, key: Any, default: Any = ...): ...
    def getone(self, key: Any, default: Any = ...): ...
    def __getitem__(self, key: Any): ...
    def get(self, key: Any, default: Optional[Any] = ...): ...
    def __iter__(self) -> Any: ...
    def __len__(self): ...
    def keys(self): ...
    def items(self): ...
    def values(self): ...
    def __eq__(self, other: Any) -> Any: ...
    def __contains__(self, key: Any): ...

class MultiDictProxy(_Base, MultiMapping):
    def __init__(self, arg: Any) -> None: ...
    def __reduce__(self) -> None: ...
    def copy(self): ...

class CIMultiDictProxy(MultiDictProxy):
    def __init__(self, arg: Any) -> None: ...
    def copy(self): ...

class MultiDict(_Base, MutableMultiMapping):
    def __init__(self, *args: Any, **kwargs: Any) -> None: ...
    def __sizeof__(self): ...
    def __reduce__(self): ...
    def add(self, key: Any, value: Any) -> None: ...
    def copy(self): ...
    __copy__: Any = ...
    def extend(self, *args: Any, **kwargs: Any) -> None: ...
    def clear(self) -> None: ...
    def __setitem__(self, key: Any, value: Any) -> None: ...
    def __delitem__(self, key: Any) -> None: ...
    def setdefault(self, key: Any, default: Optional[Any] = ...): ...
    def popone(self, key: Any, default: Any = ...): ...
    pop: Any = ...
    def popall(self, key: Any, default: Any = ...): ...
    def popitem(self): ...
    def update(self, *args: Any, **kwargs: Any) -> None: ...

class CIMultiDict(MultiDict): ...

class _Iter:
    def __init__(self, size: Any, iterator: Any) -> None: ...
    def __iter__(self) -> Any: ...
    def __next__(self): ...
    def __length_hint__(self): ...

class _ViewBase:
    def __init__(self, impl: Any) -> None: ...
    def __len__(self): ...

class _ItemsView(_ViewBase, abc.ItemsView):
    def __contains__(self, item: Any): ...
    def __iter__(self) -> Any: ...

class _ValuesView(_ViewBase, abc.ValuesView):
    def __contains__(self, value: Any): ...
    def __iter__(self) -> Any: ...

class _KeysView(_ViewBase, abc.KeysView):
    def __contains__(self, key: Any): ...
    def __iter__(self) -> Any: ...
