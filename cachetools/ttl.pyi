from .cache import Cache as Cache
from typing import Callable, Generic, Optional, Tuple, TypeVar

_KT = TypeVar("_KT")
_VT = TypeVar("_VT")

class TTLCache(Cache[_KT, _VT]):
    """LRU Cache implementation with per-item time-to-live (TTL) value."""

    def __init__(
        self, maxsize: int, ttl: int, timer: Callable[[], float] = ..., getsizeof: Optional[Callable[[_VT], int]] = ...
    ) -> None: ...
    def __contains__(self, key: _KT) -> bool: ...
    def __getitem__(self, key: _KT, cache_getitem: Callable[[_KT], _VT] = ...) -> _VT: ...
    def __setitem__(self, key: _KT, value: _VT, cache_setitem: Callable[[_KT, _VT], None] = ...) -> None: ...
    def __delitem__(self, key: _KT, cache_delitem: Callable[[_KT], None] = ...) -> None: ...
    def __iter__(self) -> _KT: ...
    def __len__(self) -> int: ...
    @property
    def currsize(self) -> int:
        """The current size of the cache."""
        ...
    @property
    def timer(self) -> Callable[[], float]:
        """ The timer function used by the cache. """
        ...
    @property
    def ttl(self) -> int:
        """ The time-to-live value of the cache's items. """
        ...
    def expire(self, time: Optional[_Timer] = ...) -> None:
        """ Remove expired items from the cache. """
        ...
    def clear(self) -> None: ...
    def get(self, key: _KT, default: _VT = None) -> _VT: ...
    def pop(self, key: _KT, default: _VT = object) -> _VT: ...
    def setdefault(self, key: _KT, default: _VT = None) -> _VT: ...
    def popitem(self) -> Tuple[_KT, _VT]:
        """Remove and return the `(key, value)` pair least recently used that
        has not already expired.

        """
        ...
