"""
This type stub file was generated by pyright.
"""

"""
IPv6 address logic.
"""
OPT_IMPORTS = False
width = 128
word_size = 16
word_sep = ':'
family = AF_INET6
family_name = 'IPv6'
version = 6
word_base = 16
max_int = 2 ** width - 1
num_words = width // word_size
max_word = 2 ** word_size - 1
prefix_to_netmask = dict([(i, max_int ^ 2 ** width - i - 1) for i in range(0, width + 1)])
netmask_to_prefix = dict([(max_int ^ 2 ** width - i - 1, i) for i in range(0, width + 1)])
prefix_to_hostmask = dict([(i, 2 ** width - i - 1) for i in range(0, width + 1)])
hostmask_to_prefix = dict([(2 ** width - i - 1, i) for i in range(0, width + 1)])
class ipv6_compact(object):
    """An IPv6 dialect class - compact form."""
    word_fmt = ...
    compact = ...


class ipv6_full(ipv6_compact):
    """An IPv6 dialect class - 'all zeroes' form."""
    compact = ...


class ipv6_verbose(ipv6_compact):
    """An IPv6 dialect class - extra wide 'all zeroes' form."""
    word_fmt = ...
    compact = ...


def valid_str(addr, flags=...):
    """
    :param addr: An IPv6 address in presentation (string) format.

    :param flags: decides which rules are applied to the interpretation of the
        addr value. Future use - currently has no effect.

    :return: ``True`` if IPv6 address is valid, ``False`` otherwise.
    """
    ...

def str_to_int(addr, flags=...):
    """
    :param addr: An IPv6 address in string form.

    :param flags: decides which rules are applied to the interpretation of the
        addr value. Future use - currently has no effect.

    :return: The equivalent unsigned integer for a given IPv6 address.
    """
    ...

def int_to_str(int_val, dialect=...):
    """
    :param int_val: An unsigned integer.

    :param dialect: (optional) a Python class defining formatting options.

    :return: The IPv6 presentation (string) format address equivalent to the
        unsigned integer provided.
    """
    ...

def int_to_arpa(int_val):
    """
    :param int_val: An unsigned integer.

    :return: The reverse DNS lookup for an IPv6 address in network byte
        order integer form.
    """
    ...

def int_to_packed(int_val):
    """
    :param int_val: the integer to be packed.

    :return: a packed string that is equivalent to value represented by an
    unsigned integer.
    """
    ...

def packed_to_int(packed_int):
    """
    :param packed_int: a packed string containing an unsigned integer.
        It is assumed that string is packed in network byte order.

    :return: An unsigned integer equivalent to value of network address
        represented by packed binary string.
    """
    ...

def valid_words(words):
    ...

def int_to_words(int_val, num_words=..., word_size=...):
    ...

def words_to_int(words):
    ...

def valid_bits(bits):
    ...

def bits_to_int(bits):
    ...

def int_to_bits(int_val, word_sep=...):
    ...

def valid_bin(bin_val):
    ...

def int_to_bin(int_val):
    ...

def bin_to_int(bin_val):
    ...

