"""
This type stub file was generated by pyright.
"""

import re as _re
from typing import Iterable, Type
from socket import AF_LINK

"""
IEEE 48-bit EUI (MAC address) logic.

Supports numerous MAC string formats including Cisco's triple hextet as well
as bare MACs containing no delimiters.
"""
width = 48
family = AF_LINK
family_name = "MAC"
version = 48
max_int = 2 ** width - 1

class mac_eui48(object):
    """A standard IEEE EUI-48 dialect class."""

    word_size: int = ...
    num_words: int = ...
    max_word: int = ...
    word_sep: str = ...
    word_fmt: str = ...
    word_base: int = ...

class mac_unix(mac_eui48):
    """A UNIX-style MAC address dialect class."""

    word_size: int = ...
    num_words: int = ...
    word_sep: str = ...
    word_fmt: str = ...
    word_base: int = ...

class mac_unix_expanded(mac_unix):
    """A UNIX-style MAC address dialect class with leading zeroes."""

    word_fmt: str = ...

class mac_cisco(mac_eui48):
    """A Cisco 'triple hextet' MAC address dialect class."""

    word_size: int = ...
    num_words: int = ...
    word_sep: str = ...
    word_fmt: str = ...
    word_base: int = ...

class mac_bare(mac_eui48):
    """A bare (no delimiters) MAC address dialect class."""

    word_size: int = ...
    num_words: int = ...
    word_sep: str = ...
    word_fmt: str = ...
    word_base: int = ...

class mac_pgsql(mac_eui48):
    """A PostgreSQL style (2 x 24-bit words) MAC address dialect class."""

    word_size: int = ...
    num_words: int = ...
    word_sep: str = ...
    word_fmt: str = ...
    word_base: int = ...

DEFAULT_DIALECT = mac_eui48
RE_MAC_FORMATS = (
    "^" + ":".join(["([0-9A-F]{1,2})"] * 6) + "$",
    "^" + "-".join(["([0-9A-F]{1,2})"] * 6) + "$",
    "^" + ":".join(["([0-9A-F]{1,4})"] * 3) + "$",
    "^" + "-".join(["([0-9A-F]{1,4})"] * 3) + "$",
    "^" + r"\.".join(["([0-9A-F]{1,4})"] * 3) + "$",
    "^" + "-".join(["([0-9A-F]{5,6})"] * 2) + "$",
    "^" + ":".join(["([0-9A-F]{5,6})"] * 2) + "$",
    "^(" + "".join(["[0-9A-F]"] * 12) + ")$",
    "^(" + "".join(["[0-9A-F]"] * 11) + ")$",
)
RE_MAC_FORMATS = [_re.compile(_, _re.IGNORECASE) for _ in RE_MAC_FORMATS]

def valid_str(addr: str) -> bool:
    """
    :param addr: An IEEE EUI-48 (MAC) address in string form.

    :return: ``True`` if MAC address string is valid, ``False`` otherwise.
    """
    ...

def str_to_int(addr: str):
    """
    :param addr: An IEEE EUI-48 (MAC) address in string form.

    :return: An unsigned integer that is equivalent to value represented
        by EUI-48/MAC string address formatted according to the dialect
        settings.
    """
    ...

def int_to_str(int_val: int, dialect: Type[mac_eui48] = ...):
    """
    :param int_val: An unsigned integer.

    :param dialect: (optional) a Python class defining formatting options.

    :return: An IEEE EUI-48 (MAC) address string that is equivalent to
        unsigned integer formatted according to the dialect settings.
    """
    ...

def int_to_packed(int_val: int) -> str:
    """
    :param int_val: the integer to be packed.

    :return: a packed string that is equivalent to value represented by an
    unsigned integer.
    """
    ...

def packed_to_int(packed_int: str) -> int:
    """
    :param packed_int: a packed string containing an unsigned integer.
        It is assumed that string is packed in network byte order.

    :return: An unsigned integer equivalent to value of network address
        represented by packed binary string.
    """
    ...

def valid_words(words: Iterable[int], dialect: Type[mac_eui48] = ...) -> bool: ...
def int_to_words(int_val: int, dialect: Type[mac_eui48] = ...) -> Iterable[int]: ...
def words_to_int(words: Iterable[int], dialect=...) -> int: ...
def valid_bits(bits: str, dialect: Type[mac_eui48] = ...) -> bool: ...
def bits_to_int(bits: str, dialect: Type[mac_eui48] = ...) -> int: ...
def int_to_bits(int_val: int, dialect: Type[mac_eui48] = ...) -> str: ...
def valid_bin(bin_val: str, dialect: Type[mac_eui48] = ...) -> bool: ...
def int_to_bin(int_val: int) -> str: ...
def bin_to_int(bin_val: str) -> int: ...

